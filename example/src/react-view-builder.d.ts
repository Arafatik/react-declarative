// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react

declare module 'react-view-builder' {
    export { TypedField } from 'react-view-builder/model/TypedField';
    export { FieldType } from 'react-view-builder/model/FieldType';
    export { IField } from 'react-view-builder/model/IField';
    export { One, OneTyped } from 'react-view-builder/components';
}

declare module 'react-view-builder/model/TypedField' {
    import IManaged, { IManagedShallow } from 'react-view-builder/model/IManaged';
    import IEntity from 'react-view-builder/model/IEntity';
    import FieldType from 'react-view-builder/model/FieldType';
    /**
        * Компоновки
        */
    import { IFragmentLayoutProps } from 'react-view-builder/layouts/FragmentLayout';
    import { IDivLayoutProps } from 'react-view-builder/layouts/DivLayout';
    import { IGroupLayoutProps } from 'react-view-builder/layouts/GroupLayout';
    import { IPaperLayoutProps } from 'react-view-builder/layouts/PaperLayout';
    import { IExpansionLayoutProps } from 'react-view-builder/layouts/ExpansionLayout';
    /**
        * Поля ввода
        */
    import { ICheckboxFieldProps } from 'react-view-builder/fields/CheckboxField';
    import { IComboFieldProps } from 'react-view-builder/fields/ComboField';
    import { IComponentFieldProps } from 'react-view-builder/fields/ComponentField';
    import { IItemsFieldProps } from 'react-view-builder/fields/ItemsField';
    import { ILineFieldProps } from 'react-view-builder/fields/LineField';
    import { IProgressFieldProps } from 'react-view-builder/fields/ProgressField';
    import { IRadioFieldProps } from 'react-view-builder/fields/RadioField';
    import { IRatingFieldProps } from 'react-view-builder/fields/RatingField';
    import { ISliderFieldProps } from 'react-view-builder/fields/SliderField';
    import { ISwitchFieldProps } from 'react-view-builder/fields/SwitchField';
    import { ITextFieldProps } from 'react-view-builder/fields/TextField';
    import { ITypographyFieldProps } from 'react-view-builder/fields/TypographyField';
    type Exclude = Omit<IManaged, keyof IEntity>;
    type TypedFieldFactory<T extends FieldType, F extends {}> = {
            [P in keyof Omit<F, keyof Exclude>]?: F[P];
    } & {
            type: T;
    };
    type TypedFieldFactoryShallow<T extends FieldType, F extends {}> = IManagedShallow & TypedFieldFactory<T, F>;
    type Group = TypedFieldFactory<FieldType.Group, IGroupLayoutProps>;
    type Paper = TypedFieldFactory<FieldType.Paper, IPaperLayoutProps>;
    type Expansion = TypedFieldFactory<FieldType.Expansion, IExpansionLayoutProps>;
    type Fragment = TypedFieldFactory<FieldType.Fragment, IFragmentLayoutProps>;
    type Div = TypedFieldFactory<FieldType.Div, IDivLayoutProps>;
    type Line = TypedFieldFactory<FieldType.Line, ILineFieldProps>;
    type Checkbox = TypedFieldFactoryShallow<FieldType.Checkbox, ICheckboxFieldProps>;
    type Combo = TypedFieldFactoryShallow<FieldType.Combo, IComboFieldProps>;
    type Component = TypedFieldFactoryShallow<FieldType.Component, IComponentFieldProps>;
    type Items = TypedFieldFactoryShallow<FieldType.Items, IItemsFieldProps>;
    type Progress = TypedFieldFactoryShallow<FieldType.Progress, IProgressFieldProps>;
    type Radio = TypedFieldFactoryShallow<FieldType.Radio, IRadioFieldProps>;
    type Rating = TypedFieldFactoryShallow<FieldType.Rating, IRatingFieldProps>;
    type Slider = TypedFieldFactoryShallow<FieldType.Slider, ISliderFieldProps>;
    type Switch = TypedFieldFactoryShallow<FieldType.Switch, ISwitchFieldProps>;
    type Text = TypedFieldFactoryShallow<FieldType.Text, ITextFieldProps>;
    type Typography = TypedFieldFactoryShallow<FieldType.Typography, ITypographyFieldProps>;
    /**
        * Логическое ветвление компонентов
        * Typescript type-guard
        */
    export type TypedFieldRegistry<T = any> = T extends Expansion ? Expansion : T extends Group ? Group : T extends Paper ? Paper : T extends Checkbox ? Checkbox : T extends Combo ? Combo : T extends Component ? Component : T extends Items ? Items : T extends Line ? Line : T extends Progress ? Progress : T extends Radio ? Radio : T extends Rating ? Rating : T extends Slider ? Slider : T extends Switch ? Switch : T extends Text ? Text : T extends Typography ? Typography : T extends Fragment ? Fragment : T extends Div ? Div : never;
    /**
        * IOneProps - генерик, для прикладного программиста мы можем подменить IField
        * на TypedField.  Это  позволит  автоматически  выбрать  интерфейс  props для
        * IntelliSense после указания *type* или методом исключения
        */
    export type TypedField = TypedFieldRegistry & {
            name?: string;
            fields?: TypedField[];
    };
    export default TypedField;
}

declare module 'react-view-builder/model/FieldType' {
    export enum FieldType {
        Switch = "switch",
        Line = "line",
        Group = "group",
        Paper = "paper",
        Expansion = "expansion",
        Radio = "radio",
        Checkbox = "checkbox",
        Text = "text",
        Progress = "progress",
        Component = "component",
        Slider = "slider",
        Combo = "combo",
        Items = "items",
        Rating = "rating",
        Typography = "typography",
        Fragment = "fragment",
        Div = "div"
    }
    export default FieldType;
}

declare module 'react-view-builder/model/IField' {
    import * as React from 'react';
    import FieldType from 'react-view-builder/model/FieldType';
    import IAnything from 'react-view-builder/model/IAnything';
    /**
        * Объект поля для прикладного программиста
        */
    export interface IField {
            /**
                * Общие поля. Поле name позволяет задать забор
                * поля из целевого объекта, не нужен для group,
                * expansion и line.
                */
            name?: string;
            /**
                * Коллбеки, вызываемый при фокусировкеи потере фокуса.
                * Подразумевается изменение формы со стороны прикладного
                * программиста, а не работа с полем ввода
                * (например, обновление ссылки на изображение)
                */
            focus?: () => void;
            blur?: () => void;
            /**
                * Флаг только на чтение и "круглой окаймовки". У
                * компонента List филды принудительно получают
                * значения false.
                */
            readonly?: boolean;
            outlined?: boolean;
            /**
                * Поле, специфичное для RadioField и позволяющее
                * задать значение при выборе элемента кликом
                */
            radioValue?: string;
            /**
                * Поле type для MatTextField
                */
            inputType?: keyof {
                    text: "text";
                    color: "color";
                    date: "date";
                    email: "email";
                    month: "month";
                    number: "number";
                    password: "password";
                    search: "search";
                    tel: "tel";
                    time: "time";
                    url: "url";
                    week: "week";
            };
            /**
                * Делает TextField многострочным, если
                * inputRows больше единицы
                */
            inputRows?: number;
            /**
                * Иконки для MatTextField
                */
            leadingIcon?: string | React.ComponentType;
            trailingIcon?: string | React.ComponentType;
            /**
                * При клике на иконку мы можем запросить данные из модального
                * окна, расположенного в коде прикладного программиста. Коллбек
                * получает на вход текущее значение поля и функцию onChange...
                */
            leadingIconClick?: (value: IAnything, onChange: (v: IAnything) => void) => void;
            trailingIconClick?: (value: IAnything, onChange: (v: IAnything) => void) => void;
            /**
                * Максимальное число для высчитывания процента
                * (минимальное число всегда ноль)
                */
            maxPercent?: number;
            /**
                * Показывает процент числом слева
                */
            showPercentLabel?: boolean;
            /**
                * - Коллбеки, позволяющий перекрасить SliderField.
                * Работают только если заданы все вместе
                * - ВНИМАНИЕ! Потенциально возможна просадка производительности,
                * так как осуществляет рекомпиляцию стилей material-ui
                */
            sliderThumbColor?: (v: number) => string;
            sliderTrackColor?: (v: number) => string;
            sliderRailColor?: (v: number) => string;
            /**
                *  - Коллбеки, позволяющие перекрасить ProgressField.
                * Работают только если заданы все вместе
                *  - ВНИМАНИЕ! Потенциально возможна просадка производительности,
                * так как осуществляет рекомпиляцию стилей material-ui
                */
            progressColor?: (v: number) => string;
            progressBarColor?: (v: number) => string;
            /**
                * Поля, специфичные для SliderField
                */
            minSlider?: number;
            maxSlider?: number;
            stepSlider?: number;
            /**
                * Варианты выбора для ComboField и ItemsField
                */
            itemList?: string[];
            /**
                * Позволяет перевести значения у ComboField и ItemsField
                * из поле itemList на человеческий, если
                * используются константы
                */
            tr?: (s: string | IAnything) => IAnything;
            /**
                * Тип поля для логического ветвления при рендеринге
                */
            type: FieldType;
            /**
                * Наименование класса для корневого элемента поля (опционально)
                */
            className?: string;
            /**
                * Стиль корневого элемента для поля (опционально)
                */
            style?: React.CSSProperties;
            /**
                * Заголовок и описание, если возможен вывод у поля
                */
            title?: string;
            description?: string;
            /**
                * placeholder для TextField, ComboField, ItemsField
                */
            placeholder?: string;
            /**
                * Колонки для One. Не используются в List (кроме фильтров).
                * Если указано поле columns, то остальные приравниваются к
                * его значению
                */
            columns?: string;
            phoneColumns?: string;
            tabletColumns?: string;
            desktopColumns?: string;
            /**
                * Дочерние поля для групп
                */
            fields?: IField[];
            /**
                * Функция, позволяющая организовать валидацию. Если
                * возвращаемое значение не равно null, считается за
                * ошибкую. Коллбек change позволяет осуществить мутацию
                * асинхронно (опционально)
                */
            isInvalid?: (v: IAnything) => null | string;
            /**
                * Функция, позволяющая скрыть поле, исходя из целевого
                * объекта. Коллбек change позволяет осуществить мутацию
                * асинхронно (опционально)
                */
            isVisible?: (v: IAnything) => boolean;
            /**
                * Функция, позволяющая отключить поле, исходя из целевого
                * объекта. Коллбек change позволяет осуществить мутацию
                * асинхронно (опционально)
                */
            isDisabled?: (v: IAnything) => boolean;
            /**
                * Функция, применяемая если значение поля вычисляется динамически.
                * Включает readonly. Для ComponentField может возвращать JSX.
                * Коллбек change позволяет осуществить операцию асинхронно (опционально).
                */
            compute?: (v: IAnything, change: (v: IAnything) => void) => IAnything;
            /**
                * Коллбек, вызываемый у поля при не прохождении
                * валидации
                */
            invalidity?: (e: string) => void;
            /**
                * Значение по-умолчанию для поля
                */
            defaultValue?: string | number | boolean;
            /**
                * Позволяет выключить отступ. Можно использовать по аналогии
                * с исключением последней запятой при склеивании массива
                * руками, если раздражает
                */
            fieldRightMargin?: string;
            fieldBottomMargin?: string;
            /**
                * Шрифт для поля Typography
                */
            typoVariant?: keyof {
                    h2: 'h2';
                    h3: 'h3';
                    h4: 'h4';
                    h5: 'h5';
                    h6: 'h6';
                    subtitle1: 'subtitle1';
                    subtitle2: 'subtitle2';
                    body1: 'body1';
                    body2: 'body2';
            };
    }
    export default IField;
}

declare module 'react-view-builder/components' {
    export * from 'react-view-builder/components/One';
    export { default } from 'react-view-builder/components/One';
}

declare module 'react-view-builder/model/IManaged' {
    import IField from 'react-view-builder/model/IField';
    import IEntity from 'react-view-builder/model/IEntity';
    import IAnything from 'react-view-builder/model/IAnything';
    export type PickProp<T extends {}, P extends keyof T> = T[P];
    /**
        * Возможные значения value
        */
    type v = number | string | boolean | null | IAnything | IAnything[];
    /**
        * Типизацию компоновки следует вынести отдельно
        */
    export interface IManagedLayout {
            columns?: PickProp<IField, 'columns'>;
            phoneColumns?: PickProp<IField, 'phoneColumns'>;
            tabletColumns?: PickProp<IField, 'tabletColumns'>;
            desktopColumns?: PickProp<IField, 'desktopColumns'>;
            fieldRightMargin?: PickProp<IField, 'fieldRightMargin'>;
            fieldBottomMargin?: PickProp<IField, 'fieldBottomMargin'>;
    }
    /**
        * Компонент высшего порядка makeField
        * перехватывает управление над свойствами
        * поля
        */
    export interface IManagedShallow extends IManagedLayout {
            isDisabled?: PickProp<IField, 'isDisabled'>;
            isVisible?: PickProp<IField, 'isVisible'>;
            isInvalid?: PickProp<IField, 'isInvalid'>;
            invalidity?: PickProp<IField, 'invalidity'>;
            compute?: PickProp<IField, 'compute'>;
            focus?: PickProp<IField, 'focus'>;
            blur?: PickProp<IField, 'blur'>;
            defaultValue?: v;
    }
    /**
        * Свойства, не доступные управляемому полю
        */
    type Exclude = {
            object: never;
            type: never;
            focus: never;
            blur: never;
            ready: never;
            check: never;
            change: never;
            name: never;
    } & IManagedShallow;
    /**
        * Свойства сущности, обернутой в компонент высшего порядка
        * Предоставляется удобная абстракция
        */
    export interface IManaged extends Omit<IEntity, keyof Exclude> {
            value: v;
            dirty: boolean;
            disabled: boolean;
            invalid: string | null;
            onChange: (v: v, skipReadonly?: boolean) => void;
    }
    export default IManaged;
}

declare module 'react-view-builder/model/IEntity' {
    import IAnything from 'react-view-builder/model/IAnything';
    import IField from 'react-view-builder/model/IField';
    type exclude = 'defaultValue';
    /**
      * Объект сущность представляет собой поле прикладного
      * программииста, расширенное входным параметром и
      * коллбеком изменения для внутренней организации
      * работы. ВАЖНО - изменение поля влечет изменение
      * всего целевого объекта, следуя паттерну immutable
      */
    export interface IEntity extends Omit<IField, exclude> {
        change?: (object: IAnything) => void;
        invalidity: (msg: string) => void;
        check: () => void;
        ready: () => void;
        object: IAnything;
    }
    export default IEntity;
}

declare module 'react-view-builder/layouts/FragmentLayout' {
    import * as React from 'react';
    import IEntity from 'react-view-builder/model/IEntity';
    import IField from 'react-view-builder/model/IField';
    import { PickProp } from 'react-view-builder/model/IManaged';
    export interface IFragmentLayoutProps {
        isVisible?: PickProp<IField, 'isVisible'>;
    }
    interface IFragmentLayoutPrivate extends IEntity {
        children: React.ReactChild;
        ready: PickProp<IEntity, 'ready'>;
        object: PickProp<IEntity, 'object'>;
    }
    /**
      * Компоновка, которую можно скрыть, используя isVisible.
      * Потомки передаются насквозь...
      */
    export const FragmentLayout: {
        ({ children, isVisible, object, ready, }: IFragmentLayoutProps & IFragmentLayoutPrivate): JSX.Element | null;
        displayName: string;
    };
    export default FragmentLayout;
}

declare module 'react-view-builder/layouts/DivLayout' {
    import * as React from 'react';
    import IEntity from 'react-view-builder/model/IEntity';
    import IField from 'react-view-builder/model/IField';
    import { PickProp } from 'react-view-builder/model/IManaged';
    export interface IDivLayoutProps {
        className?: PickProp<IField, 'className'>;
        style?: PickProp<IField, 'style'>;
    }
    interface IDivLayoutPrivate extends IEntity {
        children: React.ReactChild;
    }
    export const DivLayout: {
        ({ children, className, style, }: IDivLayoutProps & IDivLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default DivLayout;
}

declare module 'react-view-builder/layouts/GroupLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-view-builder/components/Group";
    export interface IGroupLayoutProps extends IGroupProps {
    }
    interface IGroupLayoutPrivate {
        children: React.ReactChild;
    }
    export const GroupLayout: {
        ({ columns, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, style, className, children, }: IGroupLayoutProps & IGroupLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default GroupLayout;
}

declare module 'react-view-builder/layouts/PaperLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-view-builder/components/Group";
    import { IPaperProps } from 'react-view-builder/components/Paper';
    export interface IPaperLayoutProps extends IPaperProps, IGroupProps {
    }
    interface IPaperLayoutPrivate {
        children: React.ReactChild;
    }
    export const PaperLayout: {
        ({ columns, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, style, className, children, }: IPaperLayoutProps & IPaperLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default PaperLayout;
}

declare module 'react-view-builder/layouts/ExpansionLayout' {
    import * as React from "react";
    import { IExpansionProps } from "react-view-builder/components/Expansion";
    import { IGroupProps } from "react-view-builder/components/Group";
    export interface IExpansionLayoutProps extends IExpansionProps, IGroupProps {
    }
    interface IExpansionLayoutPrivate {
        children: React.ReactChild;
    }
    export const ExpansionLayout: {
        ({ columns, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, style, className, children, title, description, }: IExpansionLayoutProps & IExpansionLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default ExpansionLayout;
}

declare module 'react-view-builder/fields/CheckboxField' {
    import IManaged, { PickProp } from 'react-view-builder/model/IManaged';
    import IField from 'react-view-builder/model/IField';
    export interface ICheckboxFieldProps {
        title?: PickProp<IField, 'title'>;
    }
    export interface ICheckboxFieldPrivate {
        value: PickProp<IManaged, 'value'>;
        disabled: PickProp<IManaged, 'disabled'>;
        onChange: PickProp<IManaged, 'onChange'>;
    }
    export const CheckboxField: {
        ({ disabled, value, onChange, title }: ICheckboxFieldProps & ICheckboxFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/ComboField' {
    import IManaged, { PickProp } from "react-view-builder/model/IManaged";
    import IField from "react-view-builder/model/IField";
    export interface IComboFieldProps {
        description?: PickProp<IField, "description">;
        placeholder?: PickProp<IField, "placeholder">;
        outlined?: PickProp<IField, "outlined">;
        itemList?: PickProp<IField, "itemList">;
        title?: PickProp<IField, "title">;
        tr?: PickProp<IField, "tr">;
    }
    interface IComboFieldPrivate {
        value: PickProp<IManaged, "value">;
        disabled: PickProp<IManaged, "disabled">;
        onChange: PickProp<IManaged, "onChange">;
    }
    export const ComboField: {
        ({ value, disabled, description, placeholder, outlined, itemList, title, tr, onChange, }: IComboFieldProps & IComboFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/ComponentField' {
    import IField from 'react-view-builder/model/IField';
    import IManaged, { PickProp } from 'react-view-builder/model/IManaged';
    export interface IComponentFieldProps {
        compute?: PickProp<IField, 'compute'>;
    }
    interface IComponentFieldPrivate {
        value: PickProp<IManaged, 'value'>;
    }
    export const ComponentField: {
        ({ value, }: IComponentFieldProps & IComponentFieldPrivate): JSX.Element | null;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/ItemsField' {
    import IManaged, { PickProp } from "react-view-builder/model/IManaged";
    import IField from "react-view-builder/model/IField";
    export interface IItemsFieldProps {
        description?: PickProp<IField, "description">;
        placeholder?: PickProp<IField, "placeholder">;
        outlined?: PickProp<IField, "outlined">;
        itemList?: PickProp<IField, "itemList">;
        title?: PickProp<IField, "title">;
        tr?: PickProp<IField, "tr">;
    }
    interface IItemsFieldPrivate {
        onChange: PickProp<IManaged, "onChange">;
        value: PickProp<IManaged, 'value'>;
        disabled: PickProp<IManaged, "disabled">;
    }
    export const ItemsField: {
        ({ value, disabled, description, placeholder, outlined, itemList, title, tr, onChange, }: IItemsFieldProps & IItemsFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/LineField' {
    import { PickProp } from 'react-view-builder/model/IManaged';
    import IField from 'react-view-builder/model/IField';
    export interface ILineFieldProps {
        title?: PickProp<IField, 'title'>;
    }
    export const LineField: {
        ({ title, }: ILineFieldProps): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/ProgressField' {
    import IManaged, { PickProp } from "react-view-builder/model/IManaged";
    import IField from "react-view-builder/model/IField";
    export interface IProgressFieldProps {
        maxPercent?: PickProp<IField, "maxPercent">;
        showPercentLabel?: PickProp<IField, "showPercentLabel">;
    }
    interface IProgressFieldPrivate {
        value: PickProp<IManaged, "value">;
    }
    export const ProgressField: {
        ({ maxPercent, showPercentLabel, value, }: IProgressFieldProps & IProgressFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/RadioField' {
    import IManaged, { PickProp } from "react-view-builder/model/IManaged";
    import IField from "react-view-builder/model/IField";
    import IEntity from "react-view-builder/model/IEntity";
    export interface IRadioFieldProps {
        title?: PickProp<IField, "title">;
        radioValue?: string;
    }
    interface IRadioFieldPrivate {
        disabled: PickProp<IManaged, "disabled">;
        value: PickProp<IManaged, "value">;
        onChange: PickProp<IManaged, "onChange">;
        name?: PickProp<IEntity, 'name'>;
    }
    export const RadioField: {
        ({ disabled, value, onChange, title, radioValue, name, }: IRadioFieldProps & IRadioFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/RatingField' {
    import IManaged, { PickProp } from "react-view-builder/model/IManaged";
    import IField from "react-view-builder/model/IField";
    export interface IRatingFieldProps {
        readonly?: PickProp<IField, "readonly">;
        title?: PickProp<IField, "title">;
    }
    interface IRatingFieldPrivate {
        name?: string;
        value: PickProp<IManaged, "value">;
        disabled: PickProp<IManaged, "disabled">;
        onChange: PickProp<IManaged, "onChange">;
    }
    export const RatingField: {
        ({ value, disabled, readonly, title, name, onChange, }: IRatingFieldProps & IRatingFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/SliderField' {
    import IField from 'react-view-builder/model/IField';
    import IManaged, { PickProp } from 'react-view-builder/model/IManaged';
    export interface ISliderFieldProps {
        stepSlider?: PickProp<IField, 'stepSlider'>;
        maxSlider?: PickProp<IField, 'maxSlider'>;
        minSlider?: PickProp<IField, 'minSlider'>;
        leadingIcon?: PickProp<IField, 'leadingIcon'>;
        trailingIcon?: PickProp<IField, 'trailingIcon'>;
        leadingIconClick?: PickProp<IField, 'leadingIconClick'>;
        trailingIconClick?: PickProp<IField, 'trailingIconClick'>;
        sliderThumbColor?: PickProp<IField, 'sliderThumbColor'>;
        sliderTrackColor?: PickProp<IField, 'sliderTrackColor'>;
        sliderRailColor?: PickProp<IField, 'sliderRailColor'>;
    }
    interface ISliderFieldPrivate {
        value: PickProp<IManaged, 'value'>;
        onChange: PickProp<IManaged, 'onChange'>;
    }
    export const SliderField: {
        ({ value, onChange, leadingIcon: li, trailingIcon: ti, leadingIconClick: lic, trailingIconClick: tic, ...otherProps }: ISliderFieldProps & ISliderFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/SwitchField' {
    import IManaged, { PickProp } from 'react-view-builder/model/IManaged';
    import IField from 'react-view-builder/model/IField';
    export interface ISwitchFieldProps {
        title?: PickProp<IField, 'title'>;
    }
    interface ISwitchFieldPrivate {
        onChange: PickProp<IManaged, 'onChange'>;
        disabled: PickProp<IManaged, 'disabled'>;
        value: PickProp<IManaged, 'value'>;
    }
    export const SwitchField: {
        ({ disabled, value, onChange, title }: ISwitchFieldProps & ISwitchFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/TextField' {
    import IManaged, { PickProp } from "react-view-builder/model/IManaged";
    import IField from "react-view-builder/model/IField";
    export interface ITextFieldProps {
        inputType?: PickProp<IField, "inputType">;
        description?: PickProp<IField, "description">;
        outlined?: PickProp<IField, "outlined">;
        title?: PickProp<IField, "title">;
        leadingIcon?: PickProp<IField, "leadingIcon">;
        trailingIcon?: PickProp<IField, "trailingIcon">;
        leadingIconClick?: PickProp<IField, "leadingIconClick">;
        trailingIconClick?: PickProp<IField, "trailingIconClick">;
        inputRows?: PickProp<IField, "inputRows">;
        placeholder?: PickProp<IField, "placeholder">;
    }
    interface ITextFieldPrivate {
        onChange: PickProp<IManaged, "onChange">;
        invalid: PickProp<IManaged, "invalid">;
        value: PickProp<IManaged, "value">;
        disabled: PickProp<IManaged, "disabled">;
        dirty: PickProp<IManaged, "dirty">;
    }
    export const TextField: {
        ({ invalid, value, disabled, inputType, description, outlined, title, leadingIcon: li, trailingIcon: ti, leadingIconClick: lic, trailingIconClick: tic, inputRows: rows, placeholder, dirty, onChange, }: ITextFieldProps & ITextFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/fields/TypographyField' {
    import IManaged, { PickProp } from 'react-view-builder/model/IManaged';
    import IField from 'react-view-builder/model/IField';
    export interface ITypographyFieldProps {
        placeholder?: PickProp<IField, 'placeholder'>;
        typoVariant?: PickProp<IField, 'typoVariant'>;
    }
    interface ITypographyFieldPrivate {
        value: PickProp<IManaged, 'value'>;
    }
    export const TypographyField: {
        ({ value, placeholder, typoVariant, }: ITypographyFieldProps & ITypographyFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, change, check, ready, compute, object, name, focus, blur, invalidity, readonly, style, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../model/IEntity").IEntity): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-view-builder/model/IAnything' {
    export type IAnything<T extends object = object> = {
        [P in keyof T]: any;
    } | any;
    export default IAnything;
}

declare module 'react-view-builder/components/One' {
    import TypedField from 'react-view-builder/model/TypedField';
    import IOneProps from 'react-view-builder/model/IOneProps';
    export const One: {
        ({ LoadPlaceholder, ready, change, fields, ...props }: IOneProps): JSX.Element;
        displayName: string;
        /**
          * После написания формы можно включить строгую
          * проверку типов полей
          * <One.typed handler={...
          *     ^^^^^^
          */
        typed: (props: IOneProps<TypedField>) => JSX.Element;
    };
    export const OneTyped: (props: IOneProps<TypedField>) => JSX.Element;
    export default One;
}

declare module 'react-view-builder/components/Group' {
    export * from 'react-view-builder/components/Group/Group';
    export { default } from 'react-view-builder/components/Group/Group';
}

declare module 'react-view-builder/components/Paper' {
    export * from 'react-view-builder/components/Paper/Paper';
    export { default } from 'react-view-builder/components/Paper/Paper';
}

declare module 'react-view-builder/components/Expansion' {
    export * from 'react-view-builder/components/Expansion/Expansion';
    export { default } from 'react-view-builder/components/Expansion/Expansion';
}

declare module 'react-view-builder/model/IOneProps' {
    import * as React from 'react';
    import IField from 'react-view-builder/model/IField';
    import IAnything from 'react-view-builder/model/IAnything';
    export interface IOneProps<Field = IField> {
            /**
                * Позволяет загружать данные в компонент
                */
            handler?: IAnything | (() => IAnything) | (() => Promise<IAnything>);
            /**
                * Вызывается при ошибке в handler
                */
            fallback?: (e: Error) => void;
            /**
                * Коллбек, вызываемый при не прохождении
                * валидации
                */
            invalidity?: (e: string) => void;
            /**
                * Вызываются при фокусировки по филду
                * в компоненте и потере фокуса
                */
            focus?: () => void;
            blur?: () => void;
            /**
                * Вызывается, когда все поля успели отрисоваться
                * в первый раз, после появления формы
                */
            ready?: () => void;
            /**
                * Вызывается после изменения и передает измененный
                * объект прикладному программисту
                */
            change?: (IAnything: IAnything, initial: boolean) => void;
            /**
                * Массив полей, выводимый в компоненте
                */
            fields: Field[];
            /**
                * Префикс для формирования ключей элементов
                */
            prefix?: string;
            /**
                * Плейсхолдер, показываемый во время загрузки данных
                */
            LoadPlaceholder?: null | React.ComponentType;
    }
    export default IOneProps;
}

declare module 'react-view-builder/components/Group/Group' {
    import * as React from "react";
    import { IManagedLayout, PickProp } from "react-view-builder/model/IManaged";
    import IField from "react-view-builder/model/IField";
    export interface IGroupProps extends IManagedLayout {
        style?: PickProp<IField, 'style'>;
        className?: PickProp<IField, 'className'>;
    }
    interface IGroupPrivate {
        children: React.ReactChild;
        isItem?: boolean;
        onFocus?: () => void;
    }
    export const Group: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, children, isItem, style, fieldRightMargin, fieldBottomMargin, onFocus, }: IGroupProps & IGroupPrivate, ref: React.Ref<HTMLDivElement>): JSX.Element;
        displayName: string;
    };
    const _default: React.ForwardRefExoticComponent<IGroupProps & IGroupPrivate & React.RefAttributes<HTMLDivElement>>;
    export default _default;
}

declare module 'react-view-builder/components/Paper/Paper' {
    import * as React from 'react';
    import IField from 'react-view-builder/model/IField';
    import { PickProp } from 'react-view-builder/model/IManaged';
    export interface IPaperProps {
        className?: PickProp<IField, 'className'>;
        style?: PickProp<IField, 'style'>;
    }
    interface IPaperPrivate {
        children: React.ReactChild;
    }
    export const Paper: {
        ({ className, style, children, }: IPaperProps & IPaperPrivate): JSX.Element;
        displayName: string;
    };
    export default Paper;
}

declare module 'react-view-builder/components/Expansion/Expansion' {
    import * as React from 'react';
    import { PickProp } from 'react-view-builder/model/IManaged';
    import IField from 'react-view-builder/model/IField';
    export interface IExpansionProps {
        title?: PickProp<IField, 'title'>;
        style?: PickProp<IField, 'style'>;
        description?: PickProp<IField, 'description'>;
        className?: PickProp<IField, 'className'>;
    }
    interface IExpansionPrivate {
        children: React.ReactChild;
    }
    export const Expansion: {
        ({ title, description, className, style, children, }: IExpansionProps & IExpansionPrivate): JSX.Element;
        displayName: string;
    };
    export default Expansion;
}

